#!/usr/bin/env python
"""
:Author Patrik Valkovic
:Created 27.03.2018 15:44
:Licence GNUv3
Part of lambda-cli

"""



from unittest import TestCase, main
from pyparsers import cyk
from lambda_cli import lambda_cli_lex
from lambda_cli.terminals import *


def to_generator(param):
    return (n for n in param)


class LexTest(TestCase):
    def test_first_alpha_reduction(self):
        result = lambda_cli_lex("((lambda x y. (x y)) y)")
        self.assertEqual(next(result), LeftBracket)
        self.assertEqual(next(result), LeftBracket)
        self.assertEqual(next(result), LambdaKeyword)
        var = next(result)
        self.assertIsInstance(var, Parameter)
        self.assertEqual(var.name, 'x')
        var = next(result)
        self.assertIsInstance(var, Parameter)
        self.assertEqual(var.name, 'y')
        self.assertEqual(next(result), Dot)
        self.assertEqual(next(result), LeftBracket)
        var = next(result)
        self.assertIsInstance(var, Variable)
        self.assertEqual(var.name, 'x')
        var = next(result)
        self.assertIsInstance(var, Variable)
        self.assertEqual(var.name, 'y')
        self.assertEqual(next(result), RightBracket)
        self.assertEqual(next(result), RightBracket)
        var = next(result)
        self.assertIsInstance(var, Variable)
        self.assertEqual(var.name, 'y')
        self.assertEqual(next(result), RightBracket)

    def test_first_lex_expression(self):
        result = lambda_cli_lex("(a (lambda b. (x (lambda c. (y t (lambda y x c. 12))))) 13 p (lambda x. (2 3)))")
        result = to_generator(result)
        self.assertEqual(next(result), LeftBracket)
        var = next(result)
        self.assertIsInstance(var, Variable)
        self.assertEqual(var.name, 'a')
        self.assertEqual(next(result), LeftBracket)
        self.assertEqual(next(result), LambdaKeyword)
        var = next(result)
        self.assertIsInstance(var, Parameter)
        self.assertEqual(var.name, 'b')
        self.assertEqual(next(result), Dot)
        self.assertEqual(next(result), LeftBracket)
        var = next(result)
        self.assertIsInstance(var, Variable)
        self.assertEqual(var.name, 'x')
        self.assertEqual(next(result), LeftBracket)
        # lambda c. (y t (lambda y x c. 12))))) 13 p (lambda x. (2 3)))
        self.assertEqual(next(result), LambdaKeyword)
        var = next(result)
        self.assertIsInstance(var, Parameter)
        self.assertEqual(var.name, 'c')
        self.assertEqual(next(result), Dot)
        self.assertEqual(next(result), LeftBracket)
        var = next(result)
        self.assertIsInstance(var, Variable)
        self.assertEqual(var.name, 'y')
        var = next(result)
        self.assertIsInstance(var, Variable)
        self.assertEqual(var.name, 't')
        self.assertEqual(next(result), LeftBracket)
        self.assertEqual(next(result), LambdaKeyword)
        var = next(result)
        self.assertIsInstance(var, Parameter)
        self.assertEqual(var.name, 'y')
        var = next(result)
        self.assertIsInstance(var, Parameter)
        self.assertEqual(var.name, 'x')
        var = next(result)
        self.assertIsInstance(var, Parameter)
        self.assertEqual(var.name, 'c')
        #. 12))))) 13 p (lambda x. (2 3)))
        self.assertEqual(next(result), Dot)
        var = next(result)
        self.assertIsInstance(var, Number)
        self.assertEqual(var.value, 12)
        self.assertEqual(next(result), RightBracket)
        self.assertEqual(next(result), RightBracket)
        self.assertEqual(next(result), RightBracket)
        self.assertEqual(next(result), RightBracket)
        self.assertEqual(next(result), RightBracket)
        var = next(result)
        self.assertIsInstance(var, Number)
        self.assertEqual(var.value, 13)
        var = next(result)
        self.assertIsInstance(var, Variable)
        self.assertEqual(var.name, 'p')
        #(lambda x. (2 3)))
        self.assertEqual(next(result), LeftBracket)
        self.assertEqual(next(result), LambdaKeyword)
        var = next(result)
        self.assertIsInstance(var, Parameter)
        self.assertEqual(var.name, 'x')
        self.assertEqual(next(result), Dot)
        self.assertEqual(next(result), LeftBracket)
        var = next(result)
        self.assertIsInstance(var, Number)
        self.assertEqual(var.value, 2)
        var = next(result)
        self.assertIsInstance(var, Number)
        self.assertEqual(var.value, 3)
        self.assertEqual(next(result), RightBracket)
        self.assertEqual(next(result), RightBracket)
        self.assertEqual(next(result), RightBracket)


    def test_longer_variables_lex(self):
        result = lambda_cli_lex("((lambda here y. ((lambda z. ((lambda f. (z f)) z)) here)) 3 7)")
        result = to_generator(result)
        # ((lambda here y. ((lambda z. ((lambda f. (z f)) z)) here)) 3 7)
        self.assertEqual(next(result), LeftBracket)
        self.assertEqual(next(result), LeftBracket)
        self.assertEqual(next(result), LambdaKeyword)
        var = next(result)
        self.assertIsInstance(var, Parameter)
        self.assertEqual(var.name, 'here')
        var = next(result)
        self.assertIsInstance(var, Parameter)
        self.assertEqual(var.name, 'y')
        self.assertEqual(next(result), Dot)
        self.assertEqual(next(result), LeftBracket)
        self.assertEqual(next(result), LeftBracket)
        self.assertEqual(next(result), LambdaKeyword)
        var = next(result)
        self.assertIsInstance(var, Parameter)
        self.assertEqual(var.name, 'z')
        self.assertEqual(next(result), Dot)
        #((lambda f. (z f)) z)) here)) 3 7)
        self.assertEqual(next(result), LeftBracket)
        self.assertEqual(next(result), LeftBracket)
        self.assertEqual(next(result), LambdaKeyword)
        var = next(result)
        self.assertIsInstance(var, Parameter)
        self.assertEqual(var.name, 'f')
        self.assertEqual(next(result), Dot)
        self.assertEqual(next(result), LeftBracket)
        var = next(result)
        self.assertIsInstance(var, Variable)
        self.assertEqual(var.name, 'z')
        var = next(result)
        self.assertIsInstance(var, Variable)
        self.assertEqual(var.name, 'f')
        self.assertEqual(next(result), RightBracket)
        self.assertEqual(next(result), RightBracket)
        var = next(result)
        self.assertIsInstance(var, Variable)
        self.assertEqual(var.name, 'z')
        self.assertEqual(next(result), RightBracket)
        self.assertEqual(next(result), RightBracket)
        # here)) 3 7)
        var = next(result)
        self.assertIsInstance(var, Variable)
        self.assertEqual(var.name, 'here')
        self.assertEqual(next(result), RightBracket)
        self.assertEqual(next(result), RightBracket)
        var = next(result)
        self.assertIsInstance(var, Number)
        self.assertEqual(var.value, 3)
        var = next(result)
        self.assertIsInstance(var, Number)
        self.assertEqual(var.value, 7)
        self.assertEqual(next(result), RightBracket)


if __name__ == '__main__':
    main()
